// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  password  String
  playlists Playlist[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Song {
  id           String         @id @default(uuid())
  title        String
  artist       String
  album        String?
  duration     Int            // Duration in seconds
  releaseYear  Int?
  genre        String?
  coverImage   String?        // URL for album cover
  previewUrl   String?        // URL for preview audio
  externalId   String?        // ID from external API if using one
  playlistSongs PlaylistSong[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Playlist {
  id          String         @id @default(uuid())
  name        String
  description String?
  coverImage  String?        // URL for playlist cover
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  songs       PlaylistSong[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model PlaylistSong {
  id         String   @id @default(uuid())
  playlistId String
  songId     String
  order      Int      // For ordering songs in playlist
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song       Song     @relation(fields: [songId], references: [id])
  addedAt    DateTime @default(now())

  @@unique([playlistId, songId])
}